# -*- coding: utf-8 -*-

"""
 Copyright 2016 cocoatomo

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

import pytest
from pygments.token import Text, Whitespace, Keyword, Name, Literal, String, Number, Operator, Punctuation, Comment
from dmdl.lexer import DmdlLexer

dmdl = DmdlLexer()

@pytest.mark.parametrize(
    ('text', 'tokens'),
    [
        (
            'sample = { id : INT; };',
            [(Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            '"description" sample = { id : INT; };',
            [(String.Double, '"'),
             (String.Double, 'd'),
             (String.Double, 'e'),
             (String.Double, 's'),
             (String.Double, 'c'),
             (String.Double, 'r'),
             (String.Double, 'i'),
             (String.Double, 'p'),
             (String.Double, 't'),
             (String.Double, 'i'),
             (String.Double, 'o'),
             (String.Double, 'n'),
             (String.Double, '"'),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            '@attr sample = { id : INT; };',
            [(Name.Attribute, '@'),
             (Name.Attribute, 'attr'),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            '"description" @attr sample = { id : INT; };',
            [(String.Double, '"'),
             (String.Double, 'd'),
             (String.Double, 'e'),
             (String.Double, 's'),
             (String.Double, 'c'),
             (String.Double, 'r'),
             (String.Double, 'i'),
             (String.Double, 'p'),
             (String.Double, 't'),
             (String.Double, 'i'),
             (String.Double, 'o'),
             (String.Double, 'n'),
             (String.Double, '"'),
             (Whitespace, ' '),
             (Name.Attribute, '@'),
             (Name.Attribute, 'attr'),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            'projective sample = { id : INT; };',
            [(Keyword.Type, 'projective'),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            'joined sample_ext = sample + sub;',
            [(Keyword.Type, 'joined'),
             (Whitespace, ' '),
             (Name.Class, 'sample_ext'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '+'),
             (Whitespace, ' '),
             (Name.Class, 'sub'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            'summarized sum_sample = sample => { any key -> key; } % key',
            [(Keyword.Type, 'summarized'),
             (Whitespace, ' '),
             (Name.Class, 'sum_sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '=>'),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name.Function, 'any'),
             (Whitespace, ' '),
             (Name, 'key'),
             (Whitespace, ' '),
             (Operator, '->'),
             (Whitespace, ' '),
             (Name, 'key'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Whitespace, ' '),
             (Operator, '%'),
             (Whitespace, ' '),
             (Name, 'key'),
             (Whitespace, '\n'),]
        ),
        ( # test for '...'
            'sample = { id : INT; ... };',
            [(Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '...'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            'sample = { };',
            [(Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            'sample = { ... };',
            [(Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Punctuation, '...'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            u'<モデル> = {'
            u'    <プロパティの名前> : <プロパティの型> ;'
            u'} + <合成するモデル> + {'
            u'    id : INT;'
            u'};',
            [(Name.Class, u'<モデル>'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Name, u'<プロパティの名前>'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, u'<プロパティの型>'),
             (Whitespace, ' '),
             (Punctuation, ';'),
             (Punctuation, '}'),
             (Whitespace, ' '),
             (Operator, '+'),
             (Whitespace, ' '),
             (Name.Variable.Instance, u'<合成するモデル>'),
             (Whitespace, ' '),
             (Operator, '+'),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Name, 'id'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, u'INT'),
             (Punctuation, ';'),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            u'joined <結合モデル名> = <対象モデル1> -> {'
            u'    ...'
            u'} % <結合キー1> + <対象モデル2> % <結合キー2-1>, <結合キー2-2>;',
            [(Keyword.Type, 'joined'),
             (Whitespace, ' '),
             (Name.Class, u'<結合モデル名>'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Name.Class, u'<対象モデル1>'),
             (Whitespace, ' '),
             (Operator, '->'),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Punctuation, '...'),
             (Punctuation, '}'),
             (Whitespace, ' '),
             (Operator, '%'),
             (Whitespace, ' '),
             (Name, u'<結合キー1>'),
             (Whitespace, ' '),
             (Operator, '+'),
             (Whitespace, ' '),
             (Name.Class, u'<対象モデル2>'),
             (Whitespace, ' '),
             (Operator, '%'),
             (Whitespace, ' '),
             (Name, u'<結合キー2-1>'),
             (Punctuation, ','),
             (Whitespace, ' '),
             (Name, u'<結合キー2-2>'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            u'summarized <集計モデル名> = <対象モデル1> => {'
            u'    <集約関数> <集約対象のプロパティ名> -> <集約結果のプロパティ名> ;'
            u'} % <グループ化キー>;',
            [(Keyword.Type, 'summarized'),
             (Whitespace, ' '),
             (Name.Class, u'<集計モデル名>'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Name.Class, u'<対象モデル1>'),
             (Whitespace, ' '),
             (Operator, '=>'),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Whitespace, ' '),
             (Name.Function, u'<集約関数>'),
             (Whitespace, ' '),
             (Name, u'<集約対象のプロパティ名>'),
             (Whitespace, ' '),
             (Operator, '->'),
             (Whitespace, ' '),
             (Name, u'<集約結果のプロパティ名>'),
             (Whitespace, ' '),
             (Punctuation, ';'),
             (Punctuation, '}'),
             (Whitespace, ' '),
             (Operator, '%'),
             (Whitespace, ' '),
             (Name, u'<グループ化キー>'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
        (
            '@attr( hoge = { "a" : 100,TRUE:{:}, } )'
            'sample = { a : INT; };',
            [(Name.Attribute, '@'),
             (Name.Attribute, 'attr'),
             (Punctuation, '('),
             (Whitespace, ' '),
             (Name, 'hoge'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Literal, ''),
             (String.Double, '"'),
             (String.Double, 'a'),
             (String.Double, '"'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Number.Integer, '100'),
             (Punctuation, ','),
             (Literal, 'TRUE'),
             (Punctuation, ':'),
             (Punctuation, '{'),
             (Punctuation, ':'),
             (Punctuation, '}'),
             (Punctuation, ','),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Whitespace, ' '),
             (Punctuation, ')'),
             (Name.Class, 'sample'),
             (Whitespace, ' '),
             (Operator, '='),
             (Whitespace, ' '),
             (Punctuation, '{'),
             (Whitespace, ' '),
             (Name, 'a'),
             (Whitespace, ' '),
             (Punctuation, ':'),
             (Whitespace, ' '),
             (Keyword.Type, 'INT'),
             (Punctuation, ';'),
             (Whitespace, ' '),
             (Punctuation, '}'),
             (Punctuation, ';'),
             (Whitespace, '\n'),]
        ),
    ]
)
def test_Dmdl(text, tokens):
    for index, token in enumerate(dmdl.get_tokens(text)):
        assert token == tokens[index]
